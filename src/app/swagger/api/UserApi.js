/**
 * The Cyrest API
 * Auto genertaed Cyrest API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

    const ApiClient = require('../ApiClient'),
     BaseErrorResponseSimple = require('../model/BaseErrorResponseSimple'),
     UserForgotPayload = require('../model/UserForgotPayload'),
     BaseNormalResponse = require('../model/BaseNormalResponse'),
     UserLoginPayload = require('../model/UserLoginPayload'),
     UserResponseLoginOK = require('../model/UserResponseLoginOK'),
     UserRegistrationPayload = require('../model/UserRegistrationPayload');

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userForgotCallPost operation.
     * @callback module:api/UserApi~userForgotCallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseNormalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * forgotPassword get email
     * @param {Object} opts Optional parameters
     * @param {module:model/UserForgotPayload} opts.payloadData 
     * @param {module:api/UserApi~userForgotCallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseNormalResponse}
     */
    this.userForgotCallPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['payloadData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseNormalResponse;

      return this.apiClient.callApi(
        '/user/forgot/call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userForgotCallbackCodeGet operation.
     * @callback module:api/UserApi~userForgotCallbackCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseNormalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * forgotGeneratePassword get email
     * @param {String} code 
     * @param {module:api/UserApi~userForgotCallbackCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseNormalResponse}
     */
    this.userForgotCallbackCodeGet = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code == undefined || code == null) {
        throw new Error("Missing the required parameter 'code' when calling userForgotCallbackCodeGet");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseNormalResponse;

      return this.apiClient.callApi(
        '/user/forgot/callback/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userLoginPost operation.
     * @callback module:api/UserApi~userLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponseLoginOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * registerUser register user in system
     * @param {Object} opts Optional parameters
     * @param {module:model/UserLoginPayload} opts.payloadData 
     * @param {module:api/UserApi~userLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponseLoginOK}
     */
    this.userLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['payloadData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponseLoginOK;

      return this.apiClient.callApi(
        '/user/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRegisterPost operation.
     * @callback module:api/UserApi~userRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponseLoginOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * registerUser register user in system
     * @param {Object} opts Optional parameters
     * @param {module:model/UserRegistrationPayload} opts.payloadData 
     * @param {module:api/UserApi~userRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponseLoginOK}
     */
    this.userRegisterPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['payloadData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponseLoginOK;

      return this.apiClient.callApi(
        '/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  module.exports = exports;
